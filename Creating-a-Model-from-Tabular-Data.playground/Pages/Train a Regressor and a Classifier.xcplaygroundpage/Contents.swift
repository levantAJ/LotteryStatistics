/*
See LICENSE folder for this sample’s licensing information.

Abstract:
Train a machine learning model by using Core ML to import and manage tabular data.
*/
/*:
 [Table of Contents](Table%20of%20Contents) | [Previous](@previous) | [Next](@next)
 ****
 # Train a Regressor and a Classifier
 ## Overview

 This sample playground uses the
 [Create ML](https://developer.apple.com/documentation/createml)
 framework to train two
 [Core ML](https://developer.apple.com/documentation/coreml)
 models, a regressor and a classifier.
 
 The playground imports a CSV file, which contains Martian housing data, into a data table.
 The data table contains the following columns of information about a habitat on Mars:
 
 - Price
 - Size (area in acres)
 - Number of greenhouses
 - Number of solar panels
 - Primary purpose
 
 The playground trains the regressor and classifier models, each with a group of columns relevant to that model.
 Once trained, the regressor is ready to predict the price of a habitat, and the classifier is ready to predict the purpose of a habitat.
 
 The playground concludes by saving each model to a file, ready for integration into an app.
 
 ## Import the Data
 Use any
 [`MLDataTable`](https://developer.apple.com/documentation/createml/mldatatable)
 initializer to import your data in to a data table.
 In this sample, the playground initializes its first data table with the contents of the CSV file embedded within the playground.
 */
import Foundation
import CreateML

/// Create a data table from a CSV file in the playground’s `Resources` folder.
let csvFile = Bundle.main.url(forResource: "lotterystatistics-27-01-2022", withExtension: "csv")!
let dataTable = try MLDataTable(contentsOf: csvFile)
/*:
 Pass your data table to `print()` to see a pretty-printed sample of its contents in the console.
 */
print(dataTable)

let regressorColumnsN2 = ["n1", "n2"] // n1 => n2
let regressorTableN2 = dataTable[regressorColumnsN2]
print(regressorTableN2)

let regressorColumnsN3 = ["n1", "n2", "n3"] // n1n2 => n3
let regressorTableN3 = dataTable[regressorColumnsN3]
print(regressorTableN3)

let regressorColumnsN4 = ["n1", "n2", "n3", "n4"] // n1n2n3 => n4
let regressorTableN4 = dataTable[regressorColumnsN4]
print(regressorTableN4)

let regressorColumnsN5 = ["n1", "n2", "n3", "n4", "n5"] // n1n2n3n4 => n5
let regressorTableN5 = dataTable[regressorColumnsN5]
print(regressorTableN5)


let regressorColumnsN6 = ["n1", "n2", "n3", "n4", "n5", "n6"] // n1n2n3n4n5 => n6
let regressorTableN6 = dataTable[regressorColumnsN6]
print(regressorTableN6)

/*:
 To predict the purpose of a habitat, the classifier needs a similar group of columns:
 
 - `purpose`
 - `solarPanels`
 - `greenhouses`
 - `size`
 */
let classifierColumns = ["n1", "n2", "n3", "n4", "n5", "n6"]
let classifierTable = dataTable[classifierColumns]
print(classifierTable)
/*:
 ## Divide the Data for Training and Evaluation
 If you intend to evaluate your model after training, reserve some of your data table’s rows for evaluation by separating them from the training data.
 By evaluating your model with data not present for training, your model’s evaluation better represents its real-world performance.
 
 The playground creates two data tables per model, one for evaluation and the other for training, by using the
 [`randomSplit(by:seed:)`](https://developer.apple.com/documentation/createml/mldatatable/3006087-randomsplit)
 method of
 [`MLDataTable`](https://developer.apple.com/documentation/createml/mldatatable).
 The method returns a tuple of two new data tables, each generated by randomly dividing the rows of the original data table.
 The size of the first data table in the tuple is determined by the `proportion` parameter, a floating point value between `0.0` and `1.0`.
 The second data table in the tuple contains the remaining data rows.
 
 In this example, the playground sets aside 20% of each model’s data rows for evaluation, leaving the remaining 80% for training.
 */

let (regressorEvaluationTableN2, regressorTrainingTableN2) = regressorTableN2.randomSplit(by: 0.20, seed: 5) // n2

let (regressorEvaluationTableN3, regressorTrainingTableN3) = regressorTableN3.randomSplit(by: 0.20, seed: 5) // n3

let (regressorEvaluationTableN4, regressorTrainingTableN4) = regressorTableN4.randomSplit(by: 0.20, seed: 5) // n4

let (regressorEvaluationTableN5, regressorTrainingTableN5) = regressorTableN5.randomSplit(by: 0.20, seed: 5) // n5

let (regressorEvaluationTableN6, regressorTrainingTableN6) = regressorTableN6.randomSplit(by: 0.20, seed: 5) // n6

let (classifierEvaluationTable, classifierTrainingTable) = classifierTable.randomSplit(by: 0.20, seed: 5)
/*:
 The amount of data your model needs for evaluation versus training will vary with each app.
 Generally, training your model with more examples leads to better performance.
 
 ## Train the Regressor
 The playground trains the regressor by providing its initializer with the training data table and the name of the target column.
 The `targetColumn` parameter determines what information you want the model to provide in its predictions.
 The playground tells the regressor to predict the price of a habitat by specifying `price` as the model’s target column.
 */

let regressorN2 = try MLLinearRegressor(trainingData: regressorTrainingTableN2, targetColumn: "n2") // => n2

let regressorN3 = try MLLinearRegressor(trainingData: regressorTrainingTableN3, targetColumn: "n3") // => n3

let regressorN4 = try MLLinearRegressor(trainingData: regressorTrainingTableN4, targetColumn: "n4") // => n4

let regressorN5 = try MLLinearRegressor(trainingData: regressorTrainingTableN5, targetColumn: "n5") // => n5

let regressorN6 = try MLLinearRegressor(trainingData: regressorTrainingTableN6, targetColumn: "n6") // => n6

/*:
 During training,
 [Create ML](https://developer.apple.com/documentation/createml)
 automatically sets aside a small percentage of the training data to use for validating the model’s progress during the training phase.
 The training process gauges the model’s performance based on the validation data.
 Depending on the validation accuracy, the training algorithm can adjust values within the model
 or even stop the training process, if the accuracy is high enough.
 Because the split is done randomly, you might get a different result each time you train a model.
 
 ## Evaluate the Regressor
 To see how accurately the regressor performed during training and validation, the playground gets the
 [`maximumError`](https://developer.apple.com/documentation/createml/mlregressormetrics/3006694-maximumerror)
 property of its
 [`trainingMetrics`](https://developer.apple.com/documentation/createml/mlregressor/3006684-trainingmetrics)
 and
 [`validationMetrics`](https://developer.apple.com/documentation/createml/mlregressor/3006685-validationmetrics)
 properties.
 */
/// The largest distances between predictions and the expected values

// n3
let worstTrainingErrorN2 = regressorN2.trainingMetrics.maximumError
let worstValidationErrorN2 = regressorN2.validationMetrics.maximumError

// n3
let worstTrainingErrorN3 = regressorN3.trainingMetrics.maximumError
let worstValidationErrorN3 = regressorN3.validationMetrics.maximumError

// n4
let worstTrainingErrorN4 = regressorN4.trainingMetrics.maximumError
let worstValidationErrorN4 = regressorN4.validationMetrics.maximumError

// n5
let worstTrainingErrorN5 = regressorN5.trainingMetrics.maximumError
let worstValidationErrorN5 = regressorN5.validationMetrics.maximumError

// n6
let worstTrainingErrorN6 = regressorN6.trainingMetrics.maximumError
let worstValidationErrorN6 = regressorN6.validationMetrics.maximumError
/*:
 - Note:
 [`MLRegressorMetrics`](https://developer.apple.com/documentation/createml/mlregressormetrics)
 also has a
 [`rootMeanSquaredError`](https://developer.apple.com/documentation/createml/mlregressormetrics/3006696-rootmeansquarederror)
 property.
 
 The playground evaluates the regressor’s performance by passing its evaluation data table.
 */
/// Evaluate the regressor

// n2
let regressorEvalutationN2 = regressorN2.evaluation(on: regressorEvaluationTableN2)
/// The largest distance between predictions and the expected values
let worstEvaluationErrorN2 = regressorEvalutationN2.maximumError

// n3
let regressorEvalutationN3 = regressorN3.evaluation(on: regressorEvaluationTableN3)
/// The largest distance between predictions and the expected values
let worstEvaluationErrorN3 = regressorEvalutationN3.maximumError

// n4
let regressorEvalutationN4 = regressorN4.evaluation(on: regressorEvaluationTableN4)
/// The largest distance between predictions and the expected values
let worstEvaluationErrorN4 = regressorEvalutationN4.maximumError

// n5
let regressorEvalutationN5 = regressorN5.evaluation(on: regressorEvaluationTableN5)
/// The largest distance between predictions and the expected values
let worstEvaluationErrorN5 = regressorEvalutationN5.maximumError

// n6
let regressorEvalutationN6 = regressorN6.evaluation(on: regressorEvaluationTableN6)
/// The largest distance between predictions and the expected values
let worstEvaluationErrorN6 = regressorEvalutationN6.maximumError
/*:
 If your regressor’s evaluation performance isn’t good enough, you may need to:
 
 - Retrain with more rows of data.
 - Choose a different, specific regressor type (see "Supporting Types" under
 [`MLRegressor`](https://developer.apple.com/documentation/createml/mlregressor)).
 - Make other adjustments (see
 [`Improving Your Model’s Accuracy`](https://developer.apple.com/documentation/createml/improving_your_model_s_accuracy)).
 
 ## Train the Classifier
 The playground trains the classifier to predict the purpose of a habitat.
 It does so by targeting a classifier on the `purpose` column of its training data table.
 */
let classifier = try MLClassifier(trainingData: classifierTrainingTable, targetColumn: "n1")
/*:
 A classifier can only predict values provided in its training data, unlike a regressor,
 which can predict numeric values beyond those in its training data.
 For example, the playground’s classifier can only predict a value of
 `"power"`, `"farm"`, or `"general"`
 because those are the only values in the `purpose` column.
 
 - Note: As an alternative, you may also train a classifier with numerical values instead of textual labels (strings) demonstrated here.
 As with textual labels, classifiers can only return specific numerical values from its training data,
 and will not interpolate or extrapolate new values, unlike a regressor.
 
 ## Evaluate the Classifier
 To see how accurately the classifier performed during training and validation, the playground gets the
 [`classificationError`](https://developer.apple.com/documentation/createml/mlclassifiermetrics/3005445-classificationerror)
 property of its
 [`trainingMetrics`](https://developer.apple.com/documentation/createml/mlclassifier/3005440-trainingmetrics)
 and
 [`validationMetrics`](https://developer.apple.com/documentation/createml/mlclassifier/3005441-validationmetrics)
 properties.
 */
/// Classifier training accuracy as a percentage
let trainingError = classifier.trainingMetrics.classificationError
let trainingAccuracy = (1.0 - trainingError) * 100

/// Classifier validation accuracy as a percentage
let validationError = classifier.validationMetrics.classificationError
let validationAccuracy = (1.0 - validationError) * 100
/*:
 Just as with the regressor, the playground evaluates the classifier’s performance by passing its evaluation data table.
 */
/// Evaluate the classifier
let classifierEvaluation = classifier.evaluation(on: classifierEvaluationTable)

/// Classifier evaluation accuracy as a percentage
let evaluationError = classifierEvaluation.classificationError
let evaluationAccuracy = (1.0 - evaluationError) * 100
/*:
 If your classifier’s evaluation performance isn’t good enough, you may need to:
 
 - Retrain with more rows of data.
 - Choose a different, specific classifier type (see "Supporting Types" under
 [`MLClassifier`](https://developer.apple.com/documentation/createml/mlclassifier)).
 - Make other adjustments (see
 [`Improving Your Model’s Accuracy`](https://developer.apple.com/documentation/createml/improving_your_model_s_accuracy)).
 
 ## Save the Model
 When you are satisfied with your modelʼs performance, save it to a file for later use in your app.
 The playground saves the price regressor, along with metadata, to the user’s desktop with its
 [`write(to:metadata:)`](https://developer.apple.com/documentation/createml/mlregressor/3006686-write)
 method.
 */
/// Get Desktop folder’s path.
let homePath = FileManager.default.homeDirectoryForCurrentUser
let desktopPath = homePath.appendingPathComponent("Desktop")

let regressorMetadata = MLModelMetadata(author: "levantAJ", shortDescription: "Predicts the next generated numbner", version: "1.0")


/// Save the trained regressor model to the Desktop.
try regressorN2.write(to: desktopPath.appendingPathComponent("N1ToN2.mlmodel"), metadata: regressorMetadata) // => n2
try regressorN3.write(to: desktopPath.appendingPathComponent("N1N2ToN3.mlmodel"), metadata: regressorMetadata) // => n3
try regressorN4.write(to: desktopPath.appendingPathComponent("N1N2N3ToN4.mlmodel"), metadata: regressorMetadata) // => n4
try regressorN5.write(to: desktopPath.appendingPathComponent("N1N2N3N4ToN5.mlmodel"), metadata: regressorMetadata) // => n5
try regressorN6.write(to: desktopPath.appendingPathComponent("N1N2N3N4N5ToN6.mlmodel"), metadata: regressorMetadata) // => n6
/*:
 The playground similarly saves the purpose classifier to the user’s desktop.
 */
let classifierMetadata = MLModelMetadata(author: "levantAJ", shortDescription: "Predicts the purpose of a habitat on Mars.", version: "1.0")

/// Save the trained classifier model to the Desktop.
try classifier.write(to: desktopPath.appendingPathComponent("MarsHabitatPurposeClassifier.mlmodel"), metadata: classifierMetadata)
/*:
 - Note: To see the author, version, and description of a model’s
 [`MLModelMetadata `](https://developer.apple.com/documentation/createml/mlmodelmetadata),
 select the model in Xcode’s project navigator after you add it to an app.
 
 ## Add the Model to an App
 To add your model to an app, see
 [Integrating a Core ML Model into Your App](https://developer.apple.com/documentation/coreml/integrating_a_core_ml_model_into_your_app).
 */
//: [Table of Contents](Table%20of%20Contents) | [Previous](@previous) | [Next](@next)
